name: PublicCode and PublicOrganization Check and Update

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  check-and-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Check and Update publiccode.yaml
        if: (!contains(github.repository, '.github'))
        run: |
          echo "Installing PyYAML..."
          pip install PyYAML

          echo "Checking publiccode.yaml..."
          python - <<END
          import yaml
          import json
          from datetime import datetime

          try:
              with open("publiccode.yaml", "r") as f:
                  data = yaml.safe_load(f)
          except FileNotFoundError:
              data = {}

          if not data:
              REPO_NAME="${{ github.event.repository.name }}"
              REPO_DESC="${{ github.event.repository.description }}"
              REPO_URL="${{ github.event.repository.html_url }}"
              REPO_HOMEPAGE="${{ github.event.repository.homepage }}"
              REPO_LICENSE="${{ github.event.repository.license.key }}"
              REPO_CREATED_AT="${{ github.event.repository.created_at }}"
              ORGANISATION_NAME="${{ github.event.organization.login }}"     
              ORGANISATION_DESCRIPTION="${{ github.event.organization.description }}"     
              ORGANISATION_GITID="${{ github.event.organization.id}}"     
              ORGANISATION_URL="${{ github.event.organization.login }}"     
              ORGANISATION_AVATAR="${{ github.event.organization.avatar_url }}"     

              created_at_date = datetime.now().strftime('%Y-%m-%d')
              data = {
                  'name': REPO_NAME,
                  'url': REPO_URL,
                  'description': REPO_DESC,
                  'license': REPO_LICENSE,
                  'releaseDate': created_at_date,
                  'organisation': {
                      'name': ORGANISATION_NAME,
                      'logo': ORGANISATION_AVATAR,
                      'url': ORGANISATION_URL,
                      'description': ORGANISATION_DESCRIPTION
                  }
              }
              with open("publiccode.yaml", "w") as f:
                  yaml.safe_dump(data, f)
          else:
              short_description = data.get('nl', {}).get('description', {}).get('shortDescription', '')
              long_description = data.get('nl', {}).get('description', {}).get('longDescription', '')
          END

      - name: Check and Update opencatalogi.yaml
        if: (contains(github.repository, '.github'))
        run: |
          echo "Installing PyYAML..."
          pip install PyYAML

          echo "Updating openCatalogi.yaml..."
          python - <<END
          import yaml
          import json
          from datetime import datetime

          try:
              with open("openCatalogi.yaml", "r") as f:
                  data = yaml.safe_load(f)
          except FileNotFoundError:
              data = {}

          REPO_NAME="${{ github.event.repository.name }}"
          REPO_DESC="${{ github.event.repository.description }}"
          REPO_URL="${{ github.event.repository.html_url }}"
          REPO_HOMEPAGE="${{ github.event.repository.homepage }}"
          REPO_LICENSE="${{ github.event.repository.license.key }}"
          REPO_CREATED_AT="${{ github.event.repository.created_at }}"

          ORGANISATION_NAME="${{ github.event.organization.login }}"     
          ORGANISATION_DESCRIPTION="${{ github.event.organization.description }}"     
          ORGANISATION_GITID="${{ github.event.organization.id}}"     
          ORGANISATION_URL="${{ github.event.organization.login }}"     
          ORGANISATION_AVATAR="${{ github.event.organization.avatar_url }}"     

          if 'nl' not in data:
              data['nl'] = {}

          with open("openCatalogi.yaml", "w") as f:
              yaml.safe_dump(data, f)
          END

      - name: Commit and Push changes
        if: (!contains(github.repository, '.github'))
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add publiccode.yaml
          git commit -m "${{ github.workflow }}" || (echo "No changes to commit" && exit 0)
          git pull --rebase origin main
          git push

      - name: Commit and Push changes
        if: (contains(github.repository, '.github'))
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add openCatalogi.yaml
          git commit -m "${{ github.workflow }}" || (echo "No changes to commit" && exit 0)
          git pull --rebase origin main
          git push

  publish-to-opencatalogi:
    runs-on: ubuntu-latest
    needs: check-and-update
    steps:

      - name: Post Repository URL to OpenCatalogi API
        run: |
          curl -X POST "https://api.opencatalogi.nl/api/github_events" \
          -H "Content-Type: application/json" \
          -d '{
            "repository": {
              "html_url": "'${{ github.event.repository.html_url }}'"
            }
          }'
